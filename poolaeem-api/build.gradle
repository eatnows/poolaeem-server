plugins {
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.3.2'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'com.auth0:java-jwt:4.4.0'

    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.1")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'commons-io:commons-io:2.13.0'

    implementation 'com.fasterxml.uuid:java-uuid-generator:4.2.0'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.github.loki4j:loki-logback-appender:1.4.1'

    implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        html.enabled true
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    useJUnitPlatform()

    finalizedBy jacocoTestReport

}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    println("======delete present asciidoctor.")
    delete file('src/main/resources/static/poolaeem-api/**')
}

task copyHTML(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/poolaeem-api/docs/qczd1dqvnb0gf60yhchro9dz2kvf9io7")
}

build {
    dependsOn copyHTML
}

bootJar {
    enabled = true
}
jar {
    enabled = false
}

ext {
    set('active', (!project.hasProperty('profile') || !profile) ? 'local' : profile)
    set('ecr_uri', System.getenv('ECR_SERVER_URI') ?: 'not exists ecr uri')
    set('loki_url', System.getenv('LOKI_URL') ?: 'not exists loki url')
    set('loki_password', System.getenv('LOKI_PASSWORD') ?: 'not exists loki password')
    set('loki_user', System.getenv('LOKI_USER') ?: 'not exists loki password')
}

jib {
    from {
        image = "eclipse-temurin:17-alpine"
        if (!active.equals("prod")) {
            platforms {
                platform {
                    architecture = "arm64"
                    os = "linux"
                }
            }
        }
    }

    to {
        image = ecr_uri
        tags = [active+"-${project.name}-latest", active+"-${project.name}-${project.version}-"+System.currentTimeMillis()]
    }
    container {
        // Set JVM options.
        jvmFlags = ['-Dspring.profiles.active='+active, '-DLOKI_URL='+loki_url, '-DLOKI_PASSWORD='+loki_password, '-DLOKI_USER='+loki_user]
//        jvmFlags = ['-Dspring.profiles.active='+active, '-XX:+UseContainerSupport', '-Dserver.port=8080', '-Dfile.encoding=UTF-8', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/var/log', '-XX:MaxRAMPercentage=60.0']
//        jvmFlags = ['$JAVA_TOOL_OPTIONS']
        // Expose different port.
        ports = ['8080']
        // Add labels.
    }
}
