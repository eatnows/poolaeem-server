plugins {
    id 'jacoco'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'com.auth0:java-jwt:4.4.0'

    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.1")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'commons-io:commons-io:2.13.0'

    implementation 'com.fasterxml.uuid:java-uuid-generator:4.2.0'
    implementation 'com.grafana:grafana-opentelemetry-starter:1.3.2'
}


jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        html.enabled true
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    useJUnitPlatform()

    finalizedBy jacocoTestReport

}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    println("======delete present asciidoctor.")
    delete file('src/main/resources/static/poolaeem-api/**')
}

task copyHTML(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/poolaeem-api/docs/qczd1dqvnb0gf60yhchro9dz2kvf9io7")
}

build {
    dependsOn copyHTML
}

bootJar {
    enabled = true
}
jar {
    enabled = false
}